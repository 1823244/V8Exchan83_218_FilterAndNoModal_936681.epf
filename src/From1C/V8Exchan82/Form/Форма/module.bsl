#Если ТолстыйКлиентОбычноеПриложение Тогда

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мКнопкаНастройки;

Перем ПолужирныйШрифт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьУзелОбменаУСтрокДерева(Дерево, УзелОбмена)
	
	Для Каждого Строка Из Дерево Цикл
		
		Если Строка.ЭтоГруппа Тогда
			
			УстановитьУзелОбменаУСтрокДерева(Строка.Строки, УзелОбмена);
			
		Иначе
			
			Строка.СсылкаНаУзелОбмена = УзелОбмена;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Открывает диалог выбора файла
//
// Параметры:
//  Элемент                - Элемент управления, для которого выбираем файл
//  ПроверятьСуществование - Если Истина, то выбор отменяется если файл не существует
// 
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь, Знач РасширениеПоУмолчанию = "xml", 
	АрхивироватьФайлДанных = Истина, ВыборФайлаПравил = Ложь)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);

	Если РасширениеПоУмолчанию = "txt" Тогда
		
		ДиалогВыбораФайла.Фильтр = НСтр("ru='Файл протокола обмена (*.txt)|*.txt'");
		ДиалогВыбораФайла.Расширение = "txt";
		
	ИначеЕсли РежимОбмена = "Выгрузка" Тогда
		
		Если АрхивироватьФайлДанных Тогда
			
			ДиалогВыбораФайла.Фильтр = НСтр("ru='Архивный файл данных (*.zip)|*.zip'");
			ДиалогВыбораФайла.Расширение = "zip";
			
		ИначеЕсли ВыборФайлаПравил Тогда
			
			ДиалогВыбораФайла.Фильтр = НСтр("ru='Файл данных (*.xml)|*.xml|Архивный файл данных (*.zip)|*.zip'");
			ДиалогВыбораФайла.Расширение = "xml";
			
		Иначе
			
			ДиалогВыбораФайла.Фильтр = НСтр("ru='Файл данных (*.xml)|*.xml'");
			ДиалогВыбораФайла.Расширение = "xml";
			
		КонецЕсли; 
		
	Иначе
		
		ДиалогВыбораФайла.Фильтр = НСтр("ru='Файл данных (*.xml)|*.xml|Архивный файл данных (*.zip)|*.zip'");
		ДиалогВыбораФайла.Расширение = "xml";
		
	КонецЕсли;
	
	ДиалогВыбораФайла.Заголовок						=	НСтр("ru='Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр		=	Ложь;
	ДиалогВыбораФайла.ИндексФильтра					=	0;
	ДиалогВыбораФайла.ПолноеИмяФайла				=	Элемент.Значение;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла	=	ПроверятьСуществование;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Элемент.Значение = ДиалогВыбораФайла.ПолноеИмяФайла;
		
		Если Элемент = ЭлементыФормы.ИмяФайлаПравил Тогда 
			ИмяФайлаПравилПриИзменении(Элемент);
			
		ИначеЕсли Элемент = ЭлементыФормы.ИмяФайлаОбмена Тогда 
			ИмяФайлаОбменаПриИзменении(Элемент);
			
		ИначеЕсли Элемент = ЭлементыФормы.ИмяФайлаДанных Тогда 
			ИмяФайлаДанныхПриИзменении(Элемент);	
	
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Служит для настройки построителя при отборе данных
//
// Параметры:
//
Процедура НастроитьПостроитель()

	ТекущееПВД = ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные;
	
	ДоступностьПостроителя = ЛОЖЬ;
	
	Если ТекущееПВД = Неопределено
		ИЛИ ТекущееПВД.ЭтоГруппа = ИСТИНА 
		ИЛИ ТекущееПВД.СпособОтбораДанных <> "СтандартнаяВыборка"
		ИЛИ (ТекущееПВД.СсылкаНаУзелОбмена <> Неопределено
		 	И НЕ ТекущееПВД.СсылкаНаУзелОбмена.Пустая()) Тогда
		 
		// отбор не поддерживается
						
	ИначеЕсли ТекущееПВД.ИмяОбъектаДляЗапросаРегистра <> Неопределено Тогда
		
		Попытка
		
			Свойства	= Менеджеры[ТекущееПВД.ОбъектВыборки];
			
			Непериодический = НЕ Свойства.Периодический;
			ПодчиненныйРегистратору = Свойства.ПодчиненныйРегистратору;
			
			СтрокаДополненияПолейВыборкиПодчиненРегистратору = ?(НЕ ПодчиненныйРегистратору, ", NULL КАК Активность,
			|	NULL КАК Регистратор,
			|	NULL КАК НомерСтроки", "");
			
			СтрокаДополненияПолейВыборкиПериодичность = ?(Непериодический, ", NULL КАК Период", "");
			
			ИтоговоеОграничениеПоДате = "";
			
			Если ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
				ИтоговоеОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(Свойства, Свойства.ИмяТипа, ТекущееПВД.ИмяОбъектаДляЗапросаРегистра, Ложь);
			КонецЕсли;
			
			Построитель.Текст = "ВЫБРАТЬ Разрешенные
					 |	*
					 |
					 | " + СтрокаДополненияПолейВыборкиПодчиненРегистратору + "
					 | " + СтрокаДополненияПолейВыборкиПериодичность + "
					 |
					 | ИЗ " + ТекущееПВД.ИмяОбъектаДляЗапросаРегистра + "
					 |
				 	 |" + ИтоговоеОграничениеПоДате;
					 
					 
			Построитель.Параметры.Вставить("ДатаНачала", ДатаНачала);
			Построитель.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
										 
			Построитель.ЗаполнитьНастройки();
			ДоступностьПостроителя = Истина;
			
		Исключение
			
									
		КонецПопытки;
		
	ИначеЕсли ТекущееПВД.ИмяОбъектаДляЗапроса <> Неопределено Тогда
		
		Свойства	= Менеджеры[ТекущееПВД.ОбъектВыборки];
		
		ИтоговоеОграничениеПоДате = "";
		
		Если ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
        	ИтоговоеОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(Свойства, Свойства.ИмяТипа, "_", Ложь);
		КонецЕсли;
		
		Построитель.Текст = "ВЫБРАТЬ Разрешенные _.* ИЗ " + ТекущееПВД.ИмяОбъектаДляЗапроса + " КАК _ 
		|
		|" + ИтоговоеОграничениеПоДате + "
		|
		|{ГДЕ _.Ссылка.* КАК " + СтрЗаменить(ТекущееПВД.ИмяОбъектаДляЗапроса, ".", "_") + "}";
		
		Построитель.Параметры.Вставить("ДатаНачала", ДатаНачала);
		Построитель.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
		
		ДоступностьПостроителя = Истина;
		
	КонецЕсли;
	
	Если ДоступностьПостроителя Тогда
		
		Построитель.Отбор.Сбросить();
		Если ТекущееПВД.НастройкиПостроителя <> Неопределено Тогда
			
			Попытка
				Построитель.УстановитьНастройки(ТекущееПВД.НастройкиПостроителя);
			Исключение
				ТекущееПВД.НастройкиПостроителя = Неопределено;
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		
		УдалитьОтборыПостроителяОтчета(Построитель);
		
	КонецЕсли;
	
	ЭлементыФормы.ПостроительОтбор.Доступность = ДоступностьПостроителя;
	ЭлементыФормы.КоманднаяПанельПостроительОтбор.Доступность = ДоступностьПостроителя;

КонецПроцедуры

Процедура УдалитьКнопкуНастроек()
	
	Если мКнопкаНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ДействияФормы.Кнопки.Удалить(мКнопкаНастройки);
	мКнопкаНастройки = Неопределено;	
	
КонецПроцедуры

Процедура ДобавитьКнопкуНастроекПриНеобходимости()
	
	Если мКнопкаНастройки <> Неопределено Тогда
		Возврат;
	КонецЕсли;
    
	мКнопкаНастройки = ЭлементыФормы.ДействияФормы.Кнопки.Добавить("Настройка", ТипКнопкиКоманднойПанели.Действие, , Новый Действие("ДействияФормыНастройки"));
	мКнопкаНастройки.Картинка = БиблиотекаКартинок.НастройкаСписка;
	мКнопкаНастройки.Отображение = ОтображениеКнопкиКоманднойПанели.НадписьКартинка;
		
КонецПроцедуры

Процедура УдалитьДобавитьКнопкуНастроекПриНеобходимости()
	
	Если ОбработкиНастройкиВыгрузки.Количество() = 0 Тогда
		
		УдалитьКнопкуНастроек();
		
	Иначе
		
		ДобавитьКнопкуНастроекПриНеобходимости();		
				
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	ЗаголовокФормы = НСтр("ru='Универсальный обмен данными в формате XML (%Версия%)'");
	ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%Версия%", ВерсияОбъектаСтрокой());
	
	Заголовок = ЗаголовокФормы;
	
	ВосстановитьСписокЗначенийДляЭлементаФормы("Обработки.УниверсальныйОбменДаннымиXML.ЗагрузкаДанныхИхФайла", ЭлементыФормы.ИмяФайлаОбмена.СписокВыбора);
	ВосстановитьСписокЗначенийДляЭлементаФормы("Обработки.УниверсальныйОбменДаннымиXML.ПравилаОбмена", ЭлементыФормы.ИмяФайлаПравил.СписокВыбора);
	ВосстановитьСписокЗначенийДляЭлементаФормы("Обработки.УниверсальныйОбменДаннымиXML.ВыгрузкаДанныхВФайл", ЭлементыФормы.ИмяФайлаДанных.СписокВыбора);
	
	ОчиститьДанныеОФайлеДляЗагрузкиДанных();
	
	ЭтоИнтерактивныйРежим = Истина;
	
	мКнопкаНастройки = ЭлементыФормы.ДействияФормы.Кнопки.Настройки;
	
	СохраненныйРежимЗагрузки = (РежимОбмена = "Загрузка");
	ГлавнаяПанельФормыПриСменеСтраницы("", ?(СохраненныйРежимЗагрузки, 1, 0));
	Если СохраненныйРежимЗагрузки Тогда
		
		// нужную страницу устанавливаем
		ЭлементыФормы.ГлавнаяПанельФормы.ТекущаяСтраница = ЭлементыФормы.ГлавнаяПанельФормы.Страницы.Загрузка;
		
	КонецЕсли;
	
	
	ОбработатьДоступностьЭлементовУправленияТранзакциями();
	
	ЗаполнитьСписокТиповДоступныхДляУдаления(УдаляемыеДанные);
	
	УдалитьДобавитьКнопкуНастроекПриНеобходимости();
	
	АрхивироватьФайлПриИзменении(Неопределено);
	
	Если Не ПустаяСтрока(ИмяФайлаОбмена)
		И СохраненныйРежимЗагрузки
		И НеЗадаватьВопросПриЗагрузкеДанныхПриОткрытииОбработки <> 0 Тогда
		
		Если НеЗадаватьВопросПриЗагрузкеДанныхПриОткрытииОбработки = 1 Тогда
			
			ТекстВопроса = НСтр("ru='Выполнить загрузку данных из файла обмена?'");
			ОтветПользователя = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);
	
			Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
					
				Возврат;			
					
			КонецЕсли;
				
		КонецЕсли;
		
		ВыполнитьЗагрузкуИзФормы();
		ПредставлениеПериодаВыгрузки = ПредставлениеПериода(ДатаНачала, ДатаОкончания);			
								
	КонецЕсли;
	
	//Установить видимость реквизитов формы
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ПриЗакрытии()

	ЭтоИнтерактивныйРежим = Ложь;
	
	УдалитьВременныеФайлы(ИмяВременногоФайлаОбработчиковСобытий);
	УдалитьВременныеФайлы(ИмяВременногоФайлаПротоколаОбмена);
	
	ДеструкторВнешнейОбработкиОбработчиковСобытий()
	
КонецПроцедуры

Процедура ПередСохранениемЗначений(Отказ)

	СохранитьПравилаВоВнутреннемФормате();

КонецПроцедуры

Процедура ПослеВосстановленияЗначений()

	ВосстановитьПравилаИзВнутреннегоФормата();
	
	ВыгрузкаДанныхВФайлОбменаПриИзменении(Неопределено);
	
	ТипИнформационнойБазыДляПодключенияПриИзменении(Неопределено);
	
	АутентификацияWindowsИнформационнойБазыДляПодключенияПриИзменении(Неопределено);
	
КонецПроцедуры

Процедура УстановитьВидимость()
	
	//Доступность кнопок настройки отладки обработчиков
	ЭлементыФормы.КнопкаНастройкаОтладкиВыгрузки.Доступность = ФлагРежимОтладкиОбработчиков;
	ЭлементыФормы.КнопкаНастройкаОтладкиЗагрузки.Доступность = ФлагРежимОтладкиОбработчиков;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ОбновитьДанныеКнопкиНастройки()
	
	Если РежимОбмена = "Выгрузка"
		И ОбработкиНастройкиВыгрузки.Количество() > 0 Тогда
		
		ДобавитьКнопкуНастроекПриНеобходимости();
		
		Если ОбработкиНастройкиВыгрузки.Количество() = 1 Тогда
			//	Кнопка типа Действие
			мКнопкаНастройки.ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
			мКнопкаНастройки.Имя       = ОбработкиНастройкиВыгрузки.Получить(0).Значение;
			мКнопкаНастройки.Текст     = ОбработкиНастройкиВыгрузки.Получить(0).Представление;
		Иначе
			//	Кнопка типа Подменю
			мКнопкаНастройки.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю;
			мКнопкаНастройки.Имя       = "Настройки";
			мКнопкаНастройки.Текст     = "Настройки";
			мКнопкаНастройки.Кнопки.Очистить();
			Для Каждого Эл Из ОбработкиНастройкиВыгрузки Цикл
				мКнопкаНастройки.Кнопки.Добавить(Эл.Значение, ТипКнопкиКоманднойПанели.Действие, Эл.Представление, Новый Действие("ДействияФормыНастройки"));
			КонецЦикла; 
		КонецЕсли;
		
	Иначе
		
		УдалитьКнопкуНастроек();
		
	КонецЕсли;	
	
КонецПроцедуры

// Обработчик события ПриСменеСтраницы панели ГлавнаяПанельФормы
//
Процедура ГлавнаяПанельФормыПриСменеСтраницы(Элемент, ТекущаяСтраница)

	КнопкаВыполнить = ЭлементыФормы.ДействияФормы.Кнопки.Выполнить;
	
	Если ТекущаяСтраница = 0 Тогда
		
		РежимОбмена = "Выгрузка";
		КнопкаВыполнить.Текст = НСтр("ru='Выгрузить данные'");
		
	ИначеЕсли ТекущаяСтраница = 1 Тогда
		
		РежимОбмена = "Загрузка";
		КнопкаВыполнить.Текст = НСтр("ru='Загрузить данные'");
		
	КонецЕсли; 
	
	ОбновитьДанныеКнопкиНастройки();
	
КонецПроцедуры

Процедура ДобавитьСтрокуКСпискуВыбора(СписокСохраняемыхЗначений, ЗначениеСохранения, ИмяПараметраДляСохранения)
	
	Если ПустаяСтрока(ЗначениеСохранения) Тогда
		Возврат;
	КонецЕсли;
	
	НайденныйЭлемент = СписокСохраняемыхЗначений.НайтиПоЗначению(ЗначениеСохранения);
	Если НайденныйЭлемент <> Неопределено Тогда
		СписокСохраняемыхЗначений.Удалить(НайденныйЭлемент);
	КонецЕсли;
	
	СписокСохраняемыхЗначений.Вставить(0, ЗначениеСохранения);
	
	Пока СписокСохраняемыхЗначений.Количество() > 10 Цикл
		СписокСохраняемыхЗначений.Удалить(СписокСохраняемыхЗначений.Количество() - 1);
	КонецЦикла;
	
	Если (ЗначениеЗаполнено(ИмяПараметраДляСохранения)) И ТипЗнч(ИмяПараметраДляСохранения) = Тип("Строка") Тогда
		СохранитьЗначение(ИмяПараметраДляСохранения, СписокСохраняемыхЗначений.Скопировать());
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуИзФормы()
	
	ДобавитьСтрокуКСпискуВыбора(ЭлементыФормы.ИмяФайлаОбмена.СписокВыбора, ИмяФайлаОбмена, "Обработки.УниверсальныйОбменДаннымиXML.ЗагрузкаДанныхИхФайла");
	
	ВыполнитьЗагрузку();
	
КонецПроцедуры

Процедура ВыполнитьВыгрузкуИзФормы()
	
	// запомним файл правил и файл выгрузки
	ДобавитьСтрокуКСпискуВыбора(ЭлементыФормы.ИмяФайлаПравил.СписокВыбора, ИмяФайлаПравилОбмена, "Обработки.УниверсальныйОбменДаннымиXML.ПравилаОбмена");

	Если НЕ НепосредственноеЧтениеВИБПриемнике Тогда
		
		Если Врег(СокрЛП(ИмяФайлаПравилОбмена)) = Врег(СокрЛП(ИмяФайлаОбмена)) Тогда
			
			ТекстПредупреждения = НСтр("ru='Файл правил обмена не может совпадать с файлом данных. Выберите другой файл для выгрузки данных.'");
			Предупреждение(ТекстПредупреждения);
			
			Возврат;
			
		КонецЕсли;
		
		ДобавитьСтрокуКСпискуВыбора(ЭлементыФормы.ИмяФайлаДанных.СписокВыбора, ИмяФайлаОбмена, "Обработки.УниверсальныйОбменДаннымиXML.ВыгрузкаДанныхВФайл");	
		
	КонецЕсли;	
	
	ВыполнитьВыгрузку();
	
КонецПроцедуры

Процедура ВосстановитьСписокЗначенийДляЭлементаФормы(ИмяПараметраДляСохранения, СписокЭлементаВизуализации)

	Если НЕ ЗначениеЗаполнено(ИмяПараметраДляСохранения) Тогда
		Возврат;
	КонецЕсли;
	
	СписокЭлементаВизуализации.Очистить();
	
	ВосстановленноеЗначение = ВосстановитьЗначение(ИмяПараметраДляСохранения);
	Если ТипЗнч(ВосстановленноеЗначение) = Тип("СписокЗначений") Тогда
		СписокЗначений = ВосстановленноеЗначение;
		СписокЭлементаВизуализации = СписокЗначений.Скопировать();
	КонецЕсли; 
	
КонецПроцедуры


// Обработчик события Нажатие кнопки Выполнить
//
Процедура ДействияФормыВыполнить(Кнопка)

	Если РежимОбмена = "Загрузка" Тогда
		ВыполнитьЗагрузкуИзФормы();
	Иначе
		ВыполнитьВыгрузкуИзФормы();
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события Нажатие кнопки Настройки
//
Процедура ДействияФормыНастройки(Кнопка)

	ИмяОбработки   = Кнопка.Имя;
	ФормаОбработки = ДопОбработки[ИмяОбработки].ПолучитьФорму( , ЭтаФорма, );
    	
	УстановитьПараметрыИзДиалога();
	
	Для Каждого Пар Из ПараметрыДопОбработок[ИмяОбработки] Цикл
		ФормаОбработки[Пар] = Параметры[Пар];
	КонецЦикла; 
	
	РезультатОткрытияФормы = ФормаОбработки.ОткрытьМодально();
	
	Если РезультатОткрытияФормы <> Неопределено Тогда
		
		Для Каждого Пар Из ПараметрыДопОбработок[ИмяОбработки] Цикл
			Параметры[Пар] = ФормаОбработки[Пар];
			УстановитьЗначениеПараметраВТаблице(Пар, ФормаОбработки[Пар]);
		КонецЦикла;
		
		ПараметрыИнициализированы = Истина;
	КонецЕсли;
	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

Процедура ИмяФайлаДанныхНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, , , АрхивироватьФайл);
	
КонецПроцедуры

Процедура ОчиститьДанныеОФайлеДляЗагрузкиДанных()
	
	ВерсияПравилОбмена = "";
	ДатаВыгрузкиДанных = "";
	ПредставлениеПериодаВыгрузки = "";
	
КонецПроцедуры


Процедура ИмяФайлаОбменаПриИзменении(Элемент)
	
	ОчиститьДанныеОФайлеДляЗагрузкиДанных();
	
КонецПроцедуры

Процедура АрхивироватьФайлПриИзменении(Элемент)

	Если АрхивироватьФайл Тогда
		ИмяФайлаОбмена = СтрЗаменить(ИмяФайлаОбмена, ".xml", ".zip");
	Иначе
		ИмяФайлаОбмена = СтрЗаменить(ИмяФайлаОбмена, ".zip", ".xml");
	КонецЕсли;
	
	ЭлементыФормы.НадписьПарольНаЗапись.Доступность = АрхивироватьФайл;
	ЭлементыФормы.ПарольДляСжатияФайлаОбмена.Доступность = АрхивироватьФайл;
	
КонецПроцедуры

Процедура УдалитьОтборыПостроителяОтчета(Построитель)
	
	ОтборКоличество = Построитель.Отбор.Количество();
	Для Н = 1 По ОтборКоличество Цикл
		Построитель.Отбор.Удалить(0);
	КонецЦикла;	
	
КонецПроцедуры

// Открывает файл обмена во внешнем приложении
//
// Параметры:
//  
// 
Процедура ОткрытьВПриложении(Элемент, СтандартнаяОбработка)
	
	Файл = Новый Файл(Элемент.Значение);
	
	Если Файл.Существует() Тогда
		
		ЗапуститьПриложение(Элемент.Значение);
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ИмяФайлаПравилНачалоВыбора(Элемент, СтандартнаяОбработка)

	ВыборФайла(Элемент, Истина, , Ложь, Истина);
	
КонецПроцедуры

Процедура КнопкаНастройкаОтладкиВыгрузкиНажатие(Элемент)
	
	ОткрытьФормуНастройкиОтладкиОбработчиковВыгрузки(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаНастройкаОтладкиЗагрузкиНажатие(Элемент)
	
	ОткрытьФормуНастройкиОтладкиОбработчиковЗагрузки(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ФлагРежимОтладкиОбработчиковВыгрузкиПриИзменении(Элемент)
	
	УстановитьВидимость();

КонецПроцедуры

Процедура ФлагРежимОтладкиОбработчиковЗагрузкиПриИзменении(Элемент)
	
	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ТаблицаПравилВыгрузки

// Обработчик события ПриИзмененииФлажка
Процедура ТаблицаПравилВыгрузкиПриИзмененииФлажка(Элемент, Колонка)

	Если Колонка.Имя = "ПВД" Тогда
		
		ТекСтрока = ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные;
		Если ТекСтрока.Включить = 2 Тогда
			ТекСтрока.Включить = 0;
		КонецЕсли;
		
		УстановитьПометкиПодчиненных(ТекСтрока, "Включить");
		УстановитьПометкиРодителей(ТекСтрока, "Включить");
		
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельТаблицаПравилВыгрузкиУстановитьПометки(Кнопка)

	Для Каждого Строка из ТаблицаПравилВыгрузки.Строки Цикл
		Строка.Включить = 1;
		УстановитьПометкиПодчиненных(Строка, "Включить");
	КонецЦикла;

КонецПроцедуры

Процедура КоманднаяПанельТаблицаПравилВыгрузкиСнятьПометки(Кнопка)

	Для Каждого Строка из ТаблицаПравилВыгрузки.Строки Цикл
		Строка.Включить = 0;
		УстановитьПометкиПодчиненных(Строка, "Включить");
	КонецЦикла;

КонецПроцедуры

Процедура КоманднаяПанельТаблицаПравилВыгрузкиОчиститьОтбор(Кнопка)

	Отбор = Новый Структура("ИспользоватьОтбор", ИСТИНА);
	Строки = ТаблицаПравилВыгрузки.Строки.НайтиСтроки(Отбор, ИСТИНА);
	Для Каждого Строка из Строки Цикл
		
		Строка.НастройкиПостроителя = Неопределено;
		Строка.ИспользоватьОтбор    = ЛОЖЬ;
		
	КонецЦикла;

КонецПроцедуры

Процедура ТаблицаПравилВыгрузкиПриАктивизацииСтроки(Элемент)

	НастроитьПостроитель();	

КонецПроцедуры

Процедура ОбновитьНастройкиПостроителяВТаблицеДляВыгрузки()
	
	ТекущееПВД = ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные;
	
	Если ТекущееПВД = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Построитель.Отбор.Количество() > 0 Тогда
		
		ТекущееПВД.НастройкиПостроителя = Построитель.ПолучитьНастройки();
		ТекущееПВД.ИспользоватьОтбор    = ИСТИНА;
		
	Иначе
		
		ТекущееПВД.НастройкиПостроителя = Неопределено;
		ТекущееПВД.ИспользоватьОтбор    = ЛОЖЬ;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПостроительОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	ОбновитьНастройкиПостроителяВТаблицеДляВыгрузки();

КонецПроцедуры

Процедура ПостроительОтборПослеУдаления(Элемент)

	ОбновитьНастройкиПостроителяВТаблицеДляВыгрузки();

КонецПроцедуры

Процедура ТаблицаПравилВыгрузкиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ДанныеСтроки.ИспользоватьОтбор Тогда
		
		ОформлениеСтроки.Шрифт = ПолужирныйШрифт;
		
	ИначеЕсли ДанныеСтроки.ЭтоГруппа Тогда
		
		Отбор = Новый Структура("ИспользоватьОтбор", ИСТИНА);
		Строки = ДанныеСтроки.Строки.НайтиСтроки(Отбор, ИСТИНА);
		
		Если Строки.Количество() > 0 Тогда
			ОформлениеСтроки.Шрифт = ПолужирныйШрифт;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ОбработатьДоступностьЭлементовУправленияТранзакциями()
	
	ЭлементыФормы.ИспользоватьТранзакции.Доступность = НЕ ФлагРежимОтладки;
	
	ЭлементыФормы.НадписьКоличествоЭлементовВТранзакции.Доступность = ИспользоватьТранзакции;
	ЭлементыФормы.КоличествоОбъектовНаТранзакцию.Доступность = ИспользоватьТранзакции;
	
КонецПроцедуры

Процедура ИспользоватьТранзакцииПриИзменении(Элемент)
	
	ОбработатьДоступностьЭлементовУправленияТранзакциями();
	
КонецПроцедуры

Процедура ФлагРежимОтладки1ПриИзменении(Элемент)
	
	Если Элемент.Значение Тогда
		
		ИспользоватьТранзакции = Ложь;
				
	КонецЕсли;
	
	ОбработатьДоступностьЭлементовУправленияТранзакциями();
	
КонецПроцедуры

Процедура КоличествоОбъектовЗагрузкиДляОбновленияСтатусаПриИзменении(Элемент)
	
	Если Элемент.Значение = 0 Тогда
		Элемент.Значение = 100;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмяФайлаПротоколаОбменаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВыборФайла(Элемент, , "txt", Ложь);
	
КонецПроцедуры

Процедура ТаблицаПравилВыгрузкиСсылкаНаУзелОбменаПриИзменении(Элемент)
	
	НастроитьПостроитель();	
	
КонецПроцедуры

Процедура УдалитьНажатие(Элемент)
	
	ТекстВопроса = НСтр("ru='Удалить выбранные данные в информационной базе?'");
	ОтветПользователя = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
	Если ОтветПользователя <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализироватьМенеджерыИСообщения();
	
	Для Каждого СтрокаТаблицы Из УдаляемыеДанные Цикл
		
		Если Не СтрокаТаблицы.Пометка Тогда
			Продолжить;
		Конецесли;
		
		ТипСтрокой = СтрокаТаблицы.Метаданные;
		
		УдалитьОбъектыТипа(ТипСтрокой);			
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ТаблицаПравилВыгрузкиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущаяКолонка.Имя = "СсылкаНаУзелОбмена" Тогда
		
		Если ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные.ЭтоГруппа Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура КоманднаяПанельТаблицаПравилВыгрузкиОчиститьУзлыОбмена(Кнопка)
	
	УстановитьУзелОбменаУСтрокДерева(ТаблицаПравилВыгрузки.Строки, Неопределено);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаПравилВыгрузкиУстановитьУзелОбмена(Кнопка)
	
	Если ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьУзелОбменаУСтрокДерева(ТаблицаПравилВыгрузки.Строки, ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные.СсылкаНаУзелОбмена);
	
КонецПроцедуры

Процедура КоманднаяПанельПостроительОтборПоказатьРезультатаОтбора(Кнопка)
	
	// показать выбранные записи
	Если ЭлементыФормы.ПостроительОтбор.Доступность <> Истина
		ИЛИ ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные.ИспользоватьОтбор Тогда
		
		НастроитьПостроитель();
		ТекущийПостроительОтчетов = Построитель;		
		
	Иначе
		
		ТекущийПостроительОтчетов = Новый ПостроительОтчета;
		
		Свойства	= Менеджеры[ЭлементыФормы.ТаблицаПравилВыгрузки.ТекущиеДанные.ОбъектВыборки];
		ИмяТипа		= Свойства.ИмяТипа;
		
		РезультатЗапроса = ПолучитьРезультатЗапросаДляВыгрузкиОчисткиДанных(Свойства, ИмяТипа, , , Истина);
		
		ТекущийПостроительОтчетов.ИсточникДанных = Новый ОписаниеИсточникаДанных(РезультатЗапроса);		
		
	КонецЕсли;
	
	ТекущийПостроительОтчетов.Параметры.Вставить("ДатаНачала", ДатаНачала);
	ТекущийПостроительОтчетов.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	
	ТекущийПостроительОтчетов.ЗаполнениеРасшифровки = ВидЗаполненияРасшифровкиПостроителяОтчета.Расшифровка; 

	ТекущийПостроительОтчетов.Вывести();
	
КонецПроцедуры

Процедура ВосстановитьПростойОтбор(СтрокаТаблицыСОтбором)
	
	СтрокаОсновныхПВД = ТаблицаПравилВыгрузки.Строки.Найти(СтрокаТаблицыСОтбором.Имя, "Имя", Истина);
	Если СтрокаОсновныхПВД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОсновныхПВД.Включить = СтрокаТаблицыСОтбором.Включить;
	
	Если СтрокаТаблицыСОтбором.НастройкиПостроителя <> Неопределено Тогда
	
		СтрокаОсновныхПВД.НастройкиПостроителя = СтрокаТаблицыСОтбором.НастройкиПостроителя;
		СтрокаОсновныхПВД.ИспользоватьОтбор    = ИСТИНА;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьОтборыПостроителя(СтрокиВременнаяТаблицаСтарыхПВД)
	
	Для Каждого СтрокаТаблицы Из СтрокиВременнаяТаблицаСтарыхПВД Цикл
		
		Если СтрокаТаблицы.Строки.Количество() > 0 Тогда
			
			СтрокаОсновныхПВД = ТаблицаПравилВыгрузки.Строки.Найти(СтрокаТаблицы.Имя, "Имя", Истина);
			Если СтрокаОсновныхПВД <> Неопределено Тогда
				
				СтрокаОсновныхПВД.Включить = СтрокаТаблицы.Включить;
				
			КонецЕсли;
			
			ВосстановитьОтборыПостроителя(СтрокаТаблицы.Строки);
			
		Иначе
			
			ВосстановитьПростойОтбор(СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗагрузкуПравилОбмена()
	
	мXMLПравила = Неопределено;
	
	ВременнаяТаблицаСтарыхПВД = ТаблицаПравилВыгрузки.Скопировать();
	
	ЗагрузитьПравилаОбмена();
	
	ВосстановитьОтборыПостроителя(ВременнаяТаблицаСтарыхПВД.Строки);	
	
	НастроитьПостроитель();	
	
	ОбновитьДанныеКнопкиНастройки();
	
	ИнициализироватьПервоначальныеЗначенияПараметров();
	
	мБылиПрочитаныПравилаОбменаПриЗагрузке = Ложь;
	
	Для Каждого СтрокаВПД Из ТаблицаПравилВыгрузки.Строки Цикл
		
		ЭлементыФормы.ТаблицаПравилВыгрузки.Развернуть(СтрокаВПД, Ложь);
		ВключитьРодителяЕслиВключеныПодчиненные(СтрокаВПД);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВключитьРодителяЕслиВключеныПодчиненные(СтрокаВПД)
	
	Включить = СтрокаВПД.Включить;
	Для Каждого СтрокаПодчиненногоВПД Из СтрокаВПД.Строки Цикл
		Если СтрокаПодчиненногоВПД.Включить = 1 Тогда
			Включить = 1;
		КонецЕсли;
		Если СтрокаПодчиненногоВПД.Строки.Количество() > 0 Тогда
			ВключитьРодителяЕслиВключеныПодчиненные(СтрокаПодчиненногоВПД);
		КонецЕсли;
	КонецЦикла;
	СтрокаВПД.Включить = Включить;
	
КонецПроцедуры

Процедура ИмяФайлаПравилПриИзменении(Элемент)
	
	Если ПустаяСтрока(ИмяФайлаПравилОбмена) Тогда
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаПравилОбмена);
	Если Не Файл.Существует() Тогда
		Возврат; 
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Загрузить правила обмена данными?'");
	ОтветПользователя = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 15, КодВозвратаДиалога.Да);
	
	Если ОтветПользователя = КодВозвратаДиалога.Да
		ИЛИ ОтветПользователя = КодВозвратаДиалога.Таймаут Тогда
		
		ВыполнитьЗагрузкуПравилОбмена();	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИмяФайлаДанныхПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(ИмяФайлаПравилОбмена)
		И Врег(СокрЛП(ИмяФайлаПравилОбмена)) = Врег(СокрЛП(ИмяФайлаОбмена)) Тогда
		
		ТекстПредупреждения = НСтр("ru='Файл правил обмена не может совпадать с файлом данных. Выберите другой файл для выгрузки данных.'");
		Предупреждение(ТекстПредупреждения);
		
	КонецЕсли;
	
	Файл = Новый Файл(ИмяФайлаОбмена);
	АрхивироватьФайл = (ВРЕГ(Файл.Расширение) = ВРЕГ(".zip"));
	
КонецПроцедуры

Процедура КнопкаУстановкиПериодаНажатие(Элемент)
	
	НП = Новый НастройкаПериода;
	НП.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	Если НП.Редактировать() Тогда
		
		ДатаНачала = НП.ПолучитьДатуНачала();
		ДатаОкончания = НП.ПолучитьДатуОкончания();

	КонецЕсли;
	
КонецПроцедуры

Процедура ВыгрузкаДанныхВФайлОбменаПриИзменении(Элемент)
	
	Если НепосредственноеЧтениеВИБПриемнике Тогда
		ЭлементыФормы.ПанельПараметрыВыгрузки.ТекущаяСтраница = ЭлементыФормы.ПанельПараметрыВыгрузки.Страницы.ВыгрузкаВИБПриемник;
	Иначе
		ЭлементыФормы.ПанельПараметрыВыгрузки.ТекущаяСтраница = ЭлементыФормы.ПанельПараметрыВыгрузки.Страницы.ВыгрузкаВФайл;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТипИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	Если ТипИнформационнойБазыДляПодключения Тогда
		ЭлементыФормы.ПанельПодключениеИБПриемник.ТекущаяСтраница = ЭлементыФормы.ПанельПодключениеИБПриемник.Страницы.ПодключениеФайловаяИБ;
	Иначе
		ЭлементыФормы.ПанельПодключениеИБПриемник.ТекущаяСтраница = ЭлементыФормы.ПанельПодключениеИБПриемник.Страницы.ПодключениеСервернаяИБ;
	КонецЕсли;	
	
КонецПроцедуры

Процедура АутентификацияWindowsИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	ЭлементыФормы.НадписьПользовательДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.ПользовательИнформационнойБазыДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.НадписьПароль.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	ЭлементыФормы.ПарольИнформационнойБазыДляПодключения.Доступность = НЕ АутентификацияWindowsИнформационнойБазыДляПодключения;
	
КонецПроцедуры

Процедура ТестПодключенияНажатие(Элемент)
	
	РезультатПодключения = ВыполнитьПодключениеКИБПриемнику();
	
	Если РезультатПодключения <> Неопределено Тогда
		
		ТекстПредупреждения = НСтр("ru='Подключение к информационной базе приемнику произошло успешно.'");
		Предупреждение(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогИнформационнойБазыДляПодключенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ДиалогВыбораФайла =	Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	
	ДиалогВыбораФайла.Заголовок = НСтр("ru='Выбор каталога информационной базы'");
	ДиалогВыбораФайла.Каталог = Элемент.Значение;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		Элемент.Значение = ДиалогВыбораФайла.Каталог;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КаталогИнформационнойБазыДляПодключенияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьВПриложении(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ВерсияПлатформыИнформационнойБазыДляПодключенияПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.Значение) Тогда
		
		ВерсияПлатформыИнформационнойБазыДляПодключения = "V8";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанель1Действие(Кнопка)
	
	УдаляемыеДанные.ЗаполнитьЗначения(Истина, "Пометка");
	
КонецПроцедуры

Процедура КоманднаяПанель1Действие1(Кнопка)
	
	УдаляемыеДанные.ЗаполнитьЗначения(Ложь, "Пометка");
	
КонецПроцедуры

Процедура ПолучитьИнформациюОФайлеОбменаНажатие(Элемент)
	
	Файл = Новый Файл(ИмяФайлаОбмена);
	Если Не Файл.Существует() Тогда
		ОчиститьДанныеОФайлеДляЗагрузкиДанных();
	КонецЕсли;
	
	Попытка
		ОткрытьФайлЗагрузки(Истина);
		ПредставлениеПериодаВыгрузки = ПредставлениеПериода(ДатаНачала, ДатаОкончания);
	Исключение
		ОчиститьДанныеОФайлеДляЗагрузкиДанных();
	КонецПопытки;
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыВыгрузкиВосстановитьПараметры(Кнопка)
	
	// восстановить параметры
	ВосстановленныеПараметры = ВосстановитьЗначение("УниверсальныйОбменданнымиXML.Параметры");
	Если ТипЗнч(ВосстановленныеПараметры) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВосстановленныеПараметры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Парам Из ВосстановленныеПараметры Цикл
		
		ИмяПараметра = Парам.Ключ;
		УстановитьЗначениеПараметраВТаблице(Парам.Ключ, Парам.Значение);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельПараметрыВыгрузкиСохранитьПараметры(Кнопка)
	
	// сохранить параметры
	УстановитьПараметрыИзДиалога();
	СохранитьЗначение("УниверсальныйОбменданнымиXML.Параметры", Параметры);
	
КонецПроцедуры

Процедура ОбновитьПравилаНажатие(Элемент)
	
	Если ПустаяСтрока(ИмяФайлаПравилОбмена) Тогда
		
		ТекстПредупреждения = НСтр("ru='Выберите файл правил обмена.'");
		Предупреждение(ТекстПредупреждения);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьЗагрузкуПравилОбмена();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

Если мСписокМакетовПравилОбмена.Количество() > 0 Тогда
	
	ЭлементыФормы.ИмяФайлаПравил.КнопкаСпискаВыбора = Истина;
	ЭлементыФормы.ИмяФайлаПравил.ВысотаСпискаВыбора = 15;
	ЭлементыФормы.ИмяФайлаПравил.СписокВыбора       = мСписокМакетовПравилОбмена.Скопировать();
	
КонецЕсли;

ПолужирныйШрифт = Новый Шрифт(,,ИСТИНА,,,);

#КонецЕсли
